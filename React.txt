--------------------------------------------------------------------------- WHAT IS REACT ? ---------------------------------------------------------------------------

- React is a JavaScript library used to build user interfaces, especially for single-page applications (SPAs).

- Created and maintained by Meta (Facebook).

- It helps developers build fast and interactive UIs with less code.

- React uses components, which are reusable, independent blocks of code that return JSX (JavaScript XML) — not plain HTML.

- React is declarative, which means you describe what the UI should look like, and React handles the updates efficiently when data changes.



--------------------------------------------------------------------------- COMPONENTS --------------------------------------------------------------------------------

-> 🔨 Creating Our First Component (Header)

- Inside the src/ folder of your React project, create a new file named Header.jsx.

- In React, function component names should follow PascalCase — e.g., Header, not header.

- React components are only capable of returing a single element but we can have child element inside it 

- Now the example is here we are creating a component using function 

	function Header(){
		
	      return( 
			<header>
				<h1> My website </h1>
			</header
		);
	}

	export default Header; // we need to write this when we create a component so we can import it in our App.jsx or any other file


- The return statement includes something that looks like HTML, but it's actually JSX — a syntax extension that allows writing HTML-like code inside JavaScript/TypeScript.

- JSX is converted into JavaScript behind the scenes (e.g., React.createElement) before rendering.

- 🔍 Try converting JSX to JS here: 🔗 https://babeljs.io/repl  // Paste the above code and see how it turns into plain JavaScript!

- Than call this Header component inside our App.jsx like this: 

	import Header from "./Header.jsx";

	function App() {
  		return <Header></Header>; // we can also write in short hand <Header/>
	}

	export default App;


- Fragments <> </> empty sets like this are know as fragments we use this to return multiple elemets cause as we know normally can only return a single element.

 Example: 
	
	return (
		 <>
      		    <Header></Header>
      		    <Footer />
    		 </>
	)


- We can use JavaScript inside our return statment by using curly brace, However outside we don't 
	
	return (
    	<footer>
      		<p>&copy; {new Date().getFullYear()} Your website name</p>
    	</footer>
  	);


--------------------------------------------------------------------------- CSS -------------------------------------------------------------------------------------

- We cannot define class directly like this class="" because, class is a keyword in JSX so we need to write it like this className=""

- To apply CSS we can go to index.css 

- We have three ways to style our REACT components with CSS

1] EXTERNAL i.e index.css

Pros: Easy to manage global styles and cached by browsers for better performance.
Cons: Styles are global by default, which can cause conflicts in large apps.
	

2] MODULES - Done a example of Button in my-react-app 

Pros: Automatically scopes styles locally to components, avoiding naming conflicts.
Cons: Requires additional setup and can complicate global styling.


3] INLINE - Done a example of Button in my-react-app

Pros: Useful for dynamic styling directly in components without conflicts.
Cons: Limited CSS features and can make code harder to read and maintain.


--------------------------------------------------------------------------- FORMS -------------------------------------------------------------------------------------

- In React, forms work similarly to HTML and JavaScript, but starting from React 19, there's a new advantage: we can directly pass a function to the form’s action attribute to handle submissions.

- React automatically passes the FormData object as the first argument to the function you pass in the action attribute.

- The name of this parameter can be anything — it's not required to be formData, as long as it's the first argument in the function.

- With this new approach, we don’t need to manually pass or use event inside our form handling function. React internally handles everything like preventDefault(), currentTarget(), and even supports reset() functionality if needed.


- Example 
		// We can name the parameter anything but its should be passed first
				
	function addIngredients(formData) {
	  const newIngredient = formData.get("ingredient");
  	  console.log(newIngredient)
	}

	<form action={addIngredients} className="ingredients-form">
  		<input name="ingredient" />
  		<button type="submit">Add</button>
	</form>

- When getting the data from the formData we can also use .getAll() *for example we want all the items which are checked from the checkbox so .get() will only give us one but .getAll() will give us all checked items 


- Now we have a shorthand or a shortcut also that we can use. if we have alot of fileds in the form than we need to write it like this 

example :
	
	function signUp(formData) {
   	 	const email = formData.get("email")
   	 	const password = formData.get("password")
   	 	const employmentStatus = formData.get("employmentStatus")
    		const dietaryRestrictions = formData.getAll("dietaryRestrictions")
   	 	const favColor = formData.get("favColor")
   	 	console.log(favColor)
  	}

- But we can write it like this instead by using the built-in javascript method 'Object.fromEntries()'
	
	  function signUp(formData) {
    		const data = Object.fromEntries(formData)
    		const dietaryRestrictions = formData.getAll("dietaryRestrictions")
    		const allData = { ...data, dietaryRestrictions }
    		console.log(allData)
  	  }

- In this we write Object.formEntries() and the data passed inside which returns us with a single 'object' of all data submitted in the form  
	
- In the example we are have dietaryRestrictions seperately because when we use Object.fromEntries() it doesn't give us all the value which are checked in the checkbox but only gives one thats why we need to access it seperately and than use the spread '...' to concat both old and new to replace the dietaryRestrictions value from old to new 